//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""9b6838c1-e064-4de3-8c3e-254cb74adfa8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4ac9edf7-e45c-4e5a-8ac3-14de7e8c2bcc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""e856068e-0e00-4124-83ca-060f6dac0420"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FireLeft"",
                    ""type"": ""Button"",
                    ""id"": ""44fbd281-e3a4-4411-970d-b2bac47a3382"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireRight"",
                    ""type"": ""Button"",
                    ""id"": ""2c773208-07f8-49b9-9584-6c8f4a4ecd0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldAbility"",
                    ""type"": ""Button"",
                    ""id"": ""e449f00a-7d3f-4ff3-a3bc-f5c65d3831f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability1"",
                    ""type"": ""Button"",
                    ""id"": ""6093cfd8-2ca3-4dab-87d0-deb9ad76c755"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability2"",
                    ""type"": ""Button"",
                    ""id"": ""f1093ef4-5a52-4749-8106-a8ae251bf85f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldGadget"",
                    ""type"": ""Button"",
                    ""id"": ""682e711f-4ee1-4764-9dd6-c73c4c96732d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gadget1"",
                    ""type"": ""Button"",
                    ""id"": ""34c053f7-1b67-4fae-8fe5-7bd82caf696d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gadget2"",
                    ""type"": ""Button"",
                    ""id"": ""b256bed4-eeee-469a-879e-e5fb8f9d4432"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeaponNext"",
                    ""type"": ""Button"",
                    ""id"": ""46fe68a6-40fc-4788-a43b-f72922f05e5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeaponPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""0f137057-3265-4da2-8b17-c8b3b6a1694c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""Button"",
                    ""id"": ""8bcc1ab4-ddac-428c-9499-da97d30ce960"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e694c465-b04d-49f3-a21b-c8064fb794f9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9fee5ee8-6545-408f-8558-8496675d1e9d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ad79a825-2f42-400e-add2-d3edd5d9ee89"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a6fd3820-84ca-4ddb-a64a-b7adc30d7995"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b237f1b-3919-441b-9d72-4f631aefeaf0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""41be9878-756f-48fa-86b9-9747778bba37"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dc9f11c-77dc-48ba-849c-287f6b68db47"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa3cc41f-3220-4c08-859b-63d1f169887b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c7465a-36ff-44fd-8d84-4228b4110a38"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1b8539f-e989-4727-a0c5-d186fcc239af"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42ac0030-43f9-408d-a74e-a6d9127cc84d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69ca152b-64fa-44de-83d2-36b2d5d6061b"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldGadget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b93e50ad-38b0-4ae3-86c8-4dd552639d99"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gadget1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""742ff01c-1176-4b7a-8c66-06c06351c0ee"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gadget2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96153f5a-75e2-4169-8a27-8ce8ec002078"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3825994-9021-43d8-a9a4-7e78d317ff58"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7f86495-a00f-4a02-86bd-f5357d6adc42"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Aim = m_Gameplay.FindAction("Aim", throwIfNotFound: true);
        m_Gameplay_FireLeft = m_Gameplay.FindAction("FireLeft", throwIfNotFound: true);
        m_Gameplay_FireRight = m_Gameplay.FindAction("FireRight", throwIfNotFound: true);
        m_Gameplay_HoldAbility = m_Gameplay.FindAction("HoldAbility", throwIfNotFound: true);
        m_Gameplay_Ability1 = m_Gameplay.FindAction("Ability1", throwIfNotFound: true);
        m_Gameplay_Ability2 = m_Gameplay.FindAction("Ability2", throwIfNotFound: true);
        m_Gameplay_HoldGadget = m_Gameplay.FindAction("HoldGadget", throwIfNotFound: true);
        m_Gameplay_Gadget1 = m_Gameplay.FindAction("Gadget1", throwIfNotFound: true);
        m_Gameplay_Gadget2 = m_Gameplay.FindAction("Gadget2", throwIfNotFound: true);
        m_Gameplay_SwitchWeaponNext = m_Gameplay.FindAction("SwitchWeaponNext", throwIfNotFound: true);
        m_Gameplay_SwitchWeaponPrevious = m_Gameplay.FindAction("SwitchWeaponPrevious", throwIfNotFound: true);
        m_Gameplay_ToggleInventory = m_Gameplay.FindAction("ToggleInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Aim;
    private readonly InputAction m_Gameplay_FireLeft;
    private readonly InputAction m_Gameplay_FireRight;
    private readonly InputAction m_Gameplay_HoldAbility;
    private readonly InputAction m_Gameplay_Ability1;
    private readonly InputAction m_Gameplay_Ability2;
    private readonly InputAction m_Gameplay_HoldGadget;
    private readonly InputAction m_Gameplay_Gadget1;
    private readonly InputAction m_Gameplay_Gadget2;
    private readonly InputAction m_Gameplay_SwitchWeaponNext;
    private readonly InputAction m_Gameplay_SwitchWeaponPrevious;
    private readonly InputAction m_Gameplay_ToggleInventory;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Aim => m_Wrapper.m_Gameplay_Aim;
        public InputAction @FireLeft => m_Wrapper.m_Gameplay_FireLeft;
        public InputAction @FireRight => m_Wrapper.m_Gameplay_FireRight;
        public InputAction @HoldAbility => m_Wrapper.m_Gameplay_HoldAbility;
        public InputAction @Ability1 => m_Wrapper.m_Gameplay_Ability1;
        public InputAction @Ability2 => m_Wrapper.m_Gameplay_Ability2;
        public InputAction @HoldGadget => m_Wrapper.m_Gameplay_HoldGadget;
        public InputAction @Gadget1 => m_Wrapper.m_Gameplay_Gadget1;
        public InputAction @Gadget2 => m_Wrapper.m_Gameplay_Gadget2;
        public InputAction @SwitchWeaponNext => m_Wrapper.m_Gameplay_SwitchWeaponNext;
        public InputAction @SwitchWeaponPrevious => m_Wrapper.m_Gameplay_SwitchWeaponPrevious;
        public InputAction @ToggleInventory => m_Wrapper.m_Gameplay_ToggleInventory;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @FireLeft.started += instance.OnFireLeft;
            @FireLeft.performed += instance.OnFireLeft;
            @FireLeft.canceled += instance.OnFireLeft;
            @FireRight.started += instance.OnFireRight;
            @FireRight.performed += instance.OnFireRight;
            @FireRight.canceled += instance.OnFireRight;
            @HoldAbility.started += instance.OnHoldAbility;
            @HoldAbility.performed += instance.OnHoldAbility;
            @HoldAbility.canceled += instance.OnHoldAbility;
            @Ability1.started += instance.OnAbility1;
            @Ability1.performed += instance.OnAbility1;
            @Ability1.canceled += instance.OnAbility1;
            @Ability2.started += instance.OnAbility2;
            @Ability2.performed += instance.OnAbility2;
            @Ability2.canceled += instance.OnAbility2;
            @HoldGadget.started += instance.OnHoldGadget;
            @HoldGadget.performed += instance.OnHoldGadget;
            @HoldGadget.canceled += instance.OnHoldGadget;
            @Gadget1.started += instance.OnGadget1;
            @Gadget1.performed += instance.OnGadget1;
            @Gadget1.canceled += instance.OnGadget1;
            @Gadget2.started += instance.OnGadget2;
            @Gadget2.performed += instance.OnGadget2;
            @Gadget2.canceled += instance.OnGadget2;
            @SwitchWeaponNext.started += instance.OnSwitchWeaponNext;
            @SwitchWeaponNext.performed += instance.OnSwitchWeaponNext;
            @SwitchWeaponNext.canceled += instance.OnSwitchWeaponNext;
            @SwitchWeaponPrevious.started += instance.OnSwitchWeaponPrevious;
            @SwitchWeaponPrevious.performed += instance.OnSwitchWeaponPrevious;
            @SwitchWeaponPrevious.canceled += instance.OnSwitchWeaponPrevious;
            @ToggleInventory.started += instance.OnToggleInventory;
            @ToggleInventory.performed += instance.OnToggleInventory;
            @ToggleInventory.canceled += instance.OnToggleInventory;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @FireLeft.started -= instance.OnFireLeft;
            @FireLeft.performed -= instance.OnFireLeft;
            @FireLeft.canceled -= instance.OnFireLeft;
            @FireRight.started -= instance.OnFireRight;
            @FireRight.performed -= instance.OnFireRight;
            @FireRight.canceled -= instance.OnFireRight;
            @HoldAbility.started -= instance.OnHoldAbility;
            @HoldAbility.performed -= instance.OnHoldAbility;
            @HoldAbility.canceled -= instance.OnHoldAbility;
            @Ability1.started -= instance.OnAbility1;
            @Ability1.performed -= instance.OnAbility1;
            @Ability1.canceled -= instance.OnAbility1;
            @Ability2.started -= instance.OnAbility2;
            @Ability2.performed -= instance.OnAbility2;
            @Ability2.canceled -= instance.OnAbility2;
            @HoldGadget.started -= instance.OnHoldGadget;
            @HoldGadget.performed -= instance.OnHoldGadget;
            @HoldGadget.canceled -= instance.OnHoldGadget;
            @Gadget1.started -= instance.OnGadget1;
            @Gadget1.performed -= instance.OnGadget1;
            @Gadget1.canceled -= instance.OnGadget1;
            @Gadget2.started -= instance.OnGadget2;
            @Gadget2.performed -= instance.OnGadget2;
            @Gadget2.canceled -= instance.OnGadget2;
            @SwitchWeaponNext.started -= instance.OnSwitchWeaponNext;
            @SwitchWeaponNext.performed -= instance.OnSwitchWeaponNext;
            @SwitchWeaponNext.canceled -= instance.OnSwitchWeaponNext;
            @SwitchWeaponPrevious.started -= instance.OnSwitchWeaponPrevious;
            @SwitchWeaponPrevious.performed -= instance.OnSwitchWeaponPrevious;
            @SwitchWeaponPrevious.canceled -= instance.OnSwitchWeaponPrevious;
            @ToggleInventory.started -= instance.OnToggleInventory;
            @ToggleInventory.performed -= instance.OnToggleInventory;
            @ToggleInventory.canceled -= instance.OnToggleInventory;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnFireLeft(InputAction.CallbackContext context);
        void OnFireRight(InputAction.CallbackContext context);
        void OnHoldAbility(InputAction.CallbackContext context);
        void OnAbility1(InputAction.CallbackContext context);
        void OnAbility2(InputAction.CallbackContext context);
        void OnHoldGadget(InputAction.CallbackContext context);
        void OnGadget1(InputAction.CallbackContext context);
        void OnGadget2(InputAction.CallbackContext context);
        void OnSwitchWeaponNext(InputAction.CallbackContext context);
        void OnSwitchWeaponPrevious(InputAction.CallbackContext context);
        void OnToggleInventory(InputAction.CallbackContext context);
    }
}
